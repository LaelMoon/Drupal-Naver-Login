<?php

/**
 * @file
 * Configuration functions for the module.
 */

/**
 * Implements hook_menu().
 */
function naver_login_menu() {

  $items['admin/config/people/naver_login'] = array(
    'title' => 'Naver Login Settings',
    'description' => 'Configure required settings for Naver Login.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('naver_login_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'naver_login.admin.inc',
  );

  $items['naver_login/auth/request'] = array(
    'page callback' => 'naver_login_auth_request',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'naver_login.pages.inc',
  );

  $items['naver_login/auth/retrieve'] = array(
    'page callback' => 'naver_login_auth_retrieve',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'naver_login.pages.inc',
  );

  $items['naver_login/auth/register'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('naver_login_auth_register'),
    'access callback' => 'user_is_anonymous',
    'type' => MENU_CALLBACK,
    'file' => 'naver_login.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_user_categories().
 */
function naver_login_user_categories() {
  return array(
    array(
      'name' => 'naver_login',
      'title' => 'Naver',
      'weight' => 5,
    ),
  );
}

/**
 * Implements hook_menu_alter().
 */
function naver_login_menu_alter(&$callbacks) {
  $callbacks['user/%user_category/edit/naver_login']['page callback'] = 'naver_login_user_identities';
  $callbacks['user/%user_category/edit/naver_login']['module'] = 'naver_login';
  $callbacks['user/%user_category/edit/naver_login']['file'] = 'naver_login.pages.inc';
}

/**
 * Implements hook_block_info().
 */
function naver_login_block_info() {
  $blocks['naver_login_block'] = array(
    'info' => t('Naver Login'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function naver_login_block_view($delta = '') {
  global $user;
  $block = array();

  switch ($delta) {
    case 'naver_login_block':
      if ($user->uid) {
        return;
      }
      $block['subject'] = t('Naver Login');
      $block['content'] = t('Login to this site using your Naver credentials. <a href="@naver_login_url">Login</a>',
        array(
          '@naver_login_url' => url('naver_login/auth/request'),
        )
      );
      break;
  }
  return $block;
}

/**
 * Check if user already registered in the naver_login_users table.
 *
 * @param int $naver_userinfo_enc_id
 *   Naver login id.
 *
 * @return int
 *   true IF correct.
 */
function naver_login_get_drupal_uid_by_naver_enc_id($naver_userinfo_enc_id) {
  if ($naver_userinfo_enc_id) {
    $query = db_select('naver_login_users', 'nlu')
        ->fields('nlu', array('drupal_user_index_no'))
        ->condition('naver_enc_id', $naver_userinfo_enc_id, '=');
    $user_registered = $query->execute()->fetchField();
    if (!empty($user_registered)) {
      return $user_registered;
    }
  }
}

/**
 * Check if user already registered in the naver_login_users table.
 *
 * @param int $drupal_user_index_no
 *   Drupal Account uid.
 *
 * @return array
 *   NULL there is no data associate this account.
 */
function naver_login_get_additional_data_by_uid($drupal_user_index_no) {
  $query = db_select('naver_login_users', 'nlu')
      ->fields('nlu', array(
        'naver_enc_id',
        'naver_email',
        'naver_nickname',
        'naver_profile_image',
        'naver_age',
        'naver_birthday',
        'gender',
      ))
      ->condition('drupal_user_index_no', $drupal_user_index_no, '=');
  $additional_data = $query->execute()->fetchAssoc();
  if (!empty($additional_data)) {
    return $additional_data;
  }
}

/**
 * Check the users table to see if the email is already in the drupal system.
 *
 * Returns uid of user with the email.
 */
function naver_login_email_already_exist($email) {
  $query = db_select('users', 'u');
  $query->fields('u', array('uid'));
  $query->condition('mail', $email, '=');
  return $query->execute()->fetchField();
}

/**
 * Stores user into table naver_login_users.
 */
function naver_login_make_connection($uid, $naver_userinfo_enc_id, $additional_data = array()) {

  db_merge('naver_login_users')
    ->key(array('naver_enc_id' => $naver_userinfo_enc_id))
    ->fields(array(
      'drupal_user_index_no' => $uid,
      'connect_timestamp' => REQUEST_TIME,
    ))
    ->execute();

  if (!empty($additional_data)) {
    db_merge('naver_login_users')
      ->key(array('naver_enc_id' => $naver_userinfo_enc_id))
      ->fields(array(
        'naver_email' => $additional_data['data']['naver_login_userinfo_email'],
        'naver_nickname' => $additional_data['data']['naver_login_userinfo_nickname'],
        'naver_profile_image' => $additional_data['data']['naver_login_userinfo_profile_image'],
        'naver_age' => $additional_data['data']['naver_login_userinfo_age'],
        'naver_birthday' => $additional_data['data']['naver_login_userinfo_birthday'],
        'gender' => $additional_data['data']['naver_login_userinfo_gender'],
      ))
      ->execute();
  }

  watchdog('naver_login', 'User has connected his Naver account (@naver_enc_id)', array('@naver_enc_id' => $naver_userinfo_enc_id), WATCHDOG_NOTICE, l(t('edit'), "user/{$uid}/edit/naver_login")
  );
  return TRUE;
}

/**
 * Revoke user into table naver_login_users.
 */
function naver_login_revoke_connection($drupal_user_index_no) {

  db_delete('naver_login_users')
    ->condition('drupal_user_index_no', $drupal_user_index_no)
    ->execute();

  return TRUE;
}

/**
 * Implements hook_user_delete().
 */
function naver_login_user_delete($account) {
  naver_login_revoke_connection($account->uid);
}
